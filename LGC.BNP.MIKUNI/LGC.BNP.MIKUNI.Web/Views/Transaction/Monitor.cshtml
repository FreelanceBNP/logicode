@model List<MasTagMapping>
@inject IConfiguration _config
@section HeaderTitle {
	@ViewData["Title"]
}
@{
	ViewData["Title"] = "Monitor";
	string url = ViewData["url"] as string;
	string _id = User.Claims.Where(c => c.Type == "user_id").Select(c => c.Value).FirstOrDefault();
	var TimeReloadMonitor = _config.GetSection("TimeReloadMonitor").Value;

}
@if (string.IsNullOrEmpty(_id))
{
	<text>
		<style>
			.app-navbar,
			div#kt_app_sidebar {
				display: none !important;

			}

			div#kt_app_wrapper {
				margin-left: unset !important;
			}

			div#kt_app_header {
				left: 0px !important;
			}

			#kt_app_header_wrapper {
				display: none !important;
			}

			#kt_app_wrapper {
				margin: unset !important;
				margin-top: 20px !important;
			}
		</style>
	</text>
}
<div class="card">
	<div class="card-header border-0 pt-6">
		<div class="mb-2 ms-2">
			<img alt="Logo" src="~/img/Logicode-Logo.png" class="h-20px app-sidebar-logo-default"
				style="margin-top: 38px;" />
			<span class="set-status-connected-socket"></span>

		</div>
	</div>
	<div class="card-body py-4">
		<div class="row text-uppercase">
			<div class="col-3 bg-success" style="height: 100%;">
				<h3 class="text-center mt-2"style="font-size: 90px"> in</h3>
				<div class="d-flex justify-content-center align-items-center fs-4 fw-bolder"style="height: auto;"><input  id="stock_in" type="number" value="0" hidden/><span id="show_stock_in" style="    font-size: 200px;">0</span></div>
			</div>
			<div class="col-6 bg-primary" style="height: 100%;">
				<h3 class="text-center mt-2"style="font-size: 90px"> stock</h3>
				<div class="d-flex justify-content-center align-items-center fs-4 fw-bolder"style="height: auto;"><input id="stock" type="number" value="0" hidden/><span id="show_stock" style="    font-size: 200px;">0</span></div>
			</div>
			<div class="col-3 bg-danger" style="height: 100%;">
				<h3 class="text-center mt-2"style="font-size: 90px"> out</h3>
				<div class="d-flex justify-content-center align-items-center fs-4 fw-bolder"style="height: auto;"><input id="stock_out" type="number" value="0" hidden/><span id="show_stock_out" style="    font-size: 200px;">0</span></div>
			</div>
		</div>
	</div>
	@section Scripts {
		<script>
			let globalTagMappingList = @Html.Raw(Json.Serialize(Model));
			let globalTagList = [];
			let globalItemList = [];
			let globalTagEvent = [];
			let connection = null;
			let isConnected = false
			let dt_invoice_table_datatable = null;
			let autoReload = "@TimeReloadMonitor"
			$(document).ready(async function () {
					let timeCount = parseFloat(autoReload) * 60

				await openScanTagCodeModal()

				let countTimeReload = 0
				let intervalReload = setInterval(async () => {
							if (countTimeReload == parseFloat(timeCount)) {
						location.reload();
						clearInterval(intervalReload)
					}
					countTimeReload += 1

				}, 1000);
				let interval = setInterval(async () => {
					if (connection == null) {
						openScanTagCodeModal();
					}
				}, 3000);
				await getEventTag();
				$('#alert_box').modal({ backdrop: 'static', keyboard: false });
			});

			function loadTagNowDay() {
				$.ajax({
					cache: false,
					async: true,
					type: "POST",
					url: "@Url.Action("GetReportTagLog", "Master")",
					data: {},
					success: function (data) {
						if (data.status == "success") {
							initDataMasterItem(data.data);
							countTagData(data.data)
						} else {
							toastr.error("Something went wrong : " + data.message);
						}
					},
					error: function (err) {
						swal.close();
						toastr.error("Something went wrong");
						resolve('error')
					}
				});
			}

			function testSetAlrm(tag) {
				connection.invoke("SetAlarm", `Alert ${tag}`).catch(err => console.error(err.toString()));
			}

			async function openScanTagCodeModal() {
				let resConnected = false
						try {

					connection = new signalR.HubConnectionBuilder()
						.withUrl("@url", {
							skipNegotiation: true,
							transport: signalR.HttpTransportType.WebSockets
						})
						.build();

					connection.on('notification', function (obj) {
						var _data = JSON.parse(obj);
			 console.log('notification', _data)
						if(_data.type =='in')
						{
							let stock_in =$('#stock_in').val()
							let stock =$('#stock').val()
							stock_in = parseInt(stock_in) + 1
							stock = parseInt(stock) + 1

							$('#stock_in').val(stock_in)
							$('#stock').val(stock)
							$('#show_stock_in').html(stock_in)
							$('#show_stock').html(stock)

						}
						else if(_data.type =='out')
						{
							let stock_out =$('#stock_out').val()
							let stock =$('#stock').val()
							stock_out = parseInt(stock_out) + 1
							stock = parseInt(stock) - 1
							if(stock < 0)
							{
								toastr.error("Stock out more than stock");
								return false;
							}
							$('#stock_out').val(stock_out)
							$('#stock').val(stock)
							$('#show_stock_out').html(stock_out)
							$('#show_stock').html(stock)

						}
							globalTagEvent.push({
								tag_code: _data.tag_code,
								type: _data.type,
								count: 1
							})
					if (time == null) {
					time = setTimeout(async () => {
						await saveDataTag();
						time = null;
						globalTagEvent = [];
					}, 1000 * 1);

				}


						});

					connection.start()
						.then(() => {
							$('.set-status-connected-socket').html(`<span class="badge badge-light-success">Connected</span>`)
								})
						.catch((err) => {
							$('.set-status-connected-socket').html(`<span class="badge badge-light-danger">Disconnected</span>`)

						});

					connection.onclose(() => {
						$('.set-status-connected-socket').html(`<span class="badge badge-light-danger">Disconnected</span>`)
							connection = null
					});

				} catch (error) {
					resConnected = false
					//set text disconnected
					$('.set-status-connected-socket').html(`<span class="badge badge-light-warning">Error</span>`)
					console.error(error)
				}

			}
					function CheckTagCode(tag_code) {
			let datenow = moment().format('DD/MM/YYYY HH:mm')
			let pos = globalItemList.findIndex(x => x.title == tag_code)
			if (pos != -1) {
				let myItemData = globalItemList[pos]

				let posDupp = globalTagEvent.findIndex(x => x.tag_code == tag_code)
				if (posDupp == -1) {
					globalTagEvent.push(globalItemList[pos])
				}
				if (time == null) {
					time = setTimeout(async () => {
						await saveDataTag();
						time = null;
						globalTagEvent = [];
					}, 1000 * 1);

				}
			}
		}

			async function getEventTag() {
				let res = await new Promise((resolve) => {
					$.ajax({
						cache: false,
						async: true,
						type: "POST",
						url: "@Url.Action("GetEventTag", "Master")",
						success: function (data) {
							if (data.status) {
								resolve(data);
							} else {
								resolve([]);
							}
						},
						error: function (err) {
							resolve([]);
						}
					});
				})
				if (res.data != null && res.data.length > 0) {
				}
				else {
				}
			}
			let time = null;

			async function saveDataTag() {
					let res = await new Promise((resolve) => {
						$.ajax({
							cache: false,
							async: true,
							type: "POST",
							url: "@Url.Action("SaveTagEvent", "Master")",
							data: {
								eventList: globalTagEvent
							},
							success: function (data) {
								if (data.status) {
									resolve(data);
								} else {
									resolve([]);
								}
							},
							error: function (err) {
								resolve([]);
							}
						});
					})
				getEventTag();
			}
			function showAlert(data) {
				let txt = ``
						if (data != null) {
					let type = data.type_allow != null ? data.type_allow : "Not Allow"
					txt = `Item : ${data.title} <br>
								Type : ${type} <br>
								`
					if (data.emp_name != '' && data.emp_name != null) {
						txt += ` Employee : ${data.emp_name}`

					}
				}
				$('#alert-text').html(txt);
				$('#alert_box').modal({ backdrop: 'static', keyboard: false })
				$('#alert_box').modal('show');
				hideModal();
			}
			var timeModalHid = null
			function hideModal() {
				if (timeModalHid) {
					clearTimeout(timeModalHid);
					timeModalHid = null;
				}
				if (timeModalHid == null) {
					timeModalHid = setTimeout(() => {
						$('#alert_box').modal('hide');
						timeModalHid = null;
					}, 1000 * 5);
				}

			}
		</script>
		<style>
		.stripe-1 {
			color: white;
			background: repeating-linear-gradient(315deg, #ff9911 -4px, #ff9911 33px, white 34px, white 64px);
		}

		.br-bottom {
			border-bottom-right-radius: 15px !important;
			border-bottom-left-radius: 15px !important;
			box-shadow: 5px 6px 2px #947575 !important;

		}

		.buttons-excel {
			background-color: #50cd89 !important;
			color: #fff !important;
			border-color: #50cd89 !important;
		}

		.btn.btn-secondary {
			background-color: #50cd89 !important;
			color: #fff !important;
			border-color: #50cd89 !important;
		}
		.set-status-connected-socket{
			    position: absolute;
				top: 59px;
				left: 207px;

		}

	}